[
  {
    "objectID": "pages/01-getting-started.html",
    "href": "pages/01-getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "A Python script is a simple text file containing a set of instructions. As long as these instructions are written in the “Python Programming Language” then the computer will be able to understand them and perform the tasks we’ve asked.\nTo create our script, go to the text editor pane in JupyterLab and type into it:\n\n\n\nscript.py\n\nprint(\"Hello from Python\")\n\n\nHello from Python\n\n\nThen go to File → Save File and you’ll see the small black circle next to the words “untitled.txt” in the tab change to a cross.\nWe’ve just saved our Python script with the name “untitled.txt” but we should give it a more descriptive name. In the far left pane you will see a list of files. Right click on “untitled.txt” and select Rename. Python files end in the extension “.py” so change its name to “script.py”.\nYou should now see that the name of the text editor tab reads script.py.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "pages/01-getting-started.html#writing-our-first-script",
    "href": "pages/01-getting-started.html#writing-our-first-script",
    "title": "Getting Started",
    "section": "",
    "text": "A Python script is a simple text file containing a set of instructions. As long as these instructions are written in the “Python Programming Language” then the computer will be able to understand them and perform the tasks we’ve asked.\nTo create our script, go to the text editor pane in JupyterLab and type into it:\n\n\n\nscript.py\n\nprint(\"Hello from Python\")\n\n\nHello from Python\n\n\nThen go to File → Save File and you’ll see the small black circle next to the words “untitled.txt” in the tab change to a cross.\nWe’ve just saved our Python script with the name “untitled.txt” but we should give it a more descriptive name. In the far left pane you will see a list of files. Right click on “untitled.txt” and select Rename. Python files end in the extension “.py” so change its name to “script.py”.\nYou should now see that the name of the text editor tab reads script.py.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "pages/01-getting-started.html#running-our-script",
    "href": "pages/01-getting-started.html#running-our-script",
    "title": "Getting Started",
    "section": "Running our script",
    "text": "Running our script\nTo run the script that we’ve just written and saved, we move to the pane on the right with the label “Terminal 1”. This pane gives us access to a command line interface to our computer. This is the same interface that you have in a Command Prompt in Windows or a Terminal on MacOS or Linux. We type commands in here and the computer runs the programmes we ask it to.\nThe only command we need to know about here is python which we run by typing python in that window, followed by a space, followed by the name of our script file (including the “.py” extension) and then pressing enter:\n\n\nTerminal/Command Prompt\n\npython script.py\n\nIf you do that you should see, printed to the terminal:\n\n\nHello from Python\n\n\nCongratulations, you’ve just written and executed your very first Python programme!\nIf you see an error here then you may need to use a slightly different command to run Python. Try running your script with python3 script.py (note the “3”) as described in this video.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "pages/01-getting-started.html#explanation",
    "href": "pages/01-getting-started.html#explanation",
    "title": "Getting Started",
    "section": "Explanation",
    "text": "Explanation\nThis was a simple script. Python is a language designed to help you write everything from small and simple scripts to large complete programs. In my opinion Python is one of the best prototyping languages, and the best language for writing programs that glue together or provide interfaces to other programs.\nThis script has introduced three of the basic building blocks of Python;\n\nA function print. Functions are instructions that tell Python to do something, in this case print tells Python to print the following string to the screen. Functions are “called” by following them with a pair of parentheses (). Whatever we put between those parentheses are called “arguments” and specify exactly what the function should do.\nA string \"Hello from Python!\". A string is just a piece of text, which can contain multiple lines. Strings are enclosed in double quotes.\nA line of code print(\"Hello from Python!\"). A line of code forms a complete instruction which can be executed by Python. Python executes each line of code, one at a time in order, moving from the top of the file downwards until it reaches the end of the file.\n\nImportant things to remember for this section are:\n\nAlways save your Python scripts after making a change (the black circle means there are unsaved changes)\nAlways give your Python scripts a “.py” extension\nPython code goes in the text editor window while you run the script from the terminal window",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "pages/01-getting-started.html#how-to-read-these-notes",
    "href": "pages/01-getting-started.html#how-to-read-these-notes",
    "title": "Getting Started",
    "section": "How to read these notes",
    "text": "How to read these notes\nIn these notes, any time that we’re seeing a full Python script, we’ll see it written like the following:\n\n\n\nscript.py\n\nprint(\"Hello from Python!\")\n\n\nHello from Python!\n\n\nHere, the name that we give the file (script.py) is above the code block, and the contents of the file (print(\"Hello from Python\")) are below it.\nWe’ll denote “run in the Terminal” with a Terminal/Command Prompt sign at the top of the block. So when we ask you to run your script, it will look like this:\n\n\nTerminal/Command Prompt\n\nrun script.py\n\n\n\nHello from Python!\n\n\nAnd we see the expected output displayed below it.\nBy contrast, any time we’re just showing you a small snippet of code, for example to demonstrate a point, it will be shown like:\n\nprint(\"Hello from Python!\")",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "answers/answer_multiple_print.html",
    "href": "answers/answer_multiple_print.html",
    "title": "Beginning Python",
    "section": "",
    "text": "The variables first_phrase and second_phrase are almost unchanged. The only difference is that first_phrase no longer has the extra space at the end of it.\nWe pass these two variables as two arguments to print(), separating them by commas. print() will automatically add spaces between each argument when displaying the output.\n\n\n\nscript.py\n\ngreeting = \"Hello\"\nname = \"Matt\"\n\nprint(greeting, name)\n\n\nOnce more, when we run our code, the output has not changed, as expected:\n\n\nTerminal/Command Prompt\n\nrun script.py\n\n\n\nHello Matt"
  },
  {
    "objectID": "answers/answer_hello_input.html",
    "href": "answers/answer_hello_input.html",
    "title": "Beginning Python",
    "section": "",
    "text": "script.py\n\ngreeting = \"Hello\"\nname = input(\"What is your name? \")\n\nprint(greeting, name)\n\n\n\n\nTerminal/Command Prompt\n\npython script.py\n\n@prompt Return to course"
  },
  {
    "objectID": "AUTHORS.html",
    "href": "AUTHORS.html",
    "title": "Contributors",
    "section": "",
    "text": "Christopher Woods\nMatt Williams"
  },
  {
    "objectID": "answers/answer_two_line_print.html",
    "href": "answers/answer_two_line_print.html",
    "title": "Beginning Python",
    "section": "",
    "text": "We have moved the string out of the parentheses and into a named variable, words. We then pass this variable to the function:\n\n\n\nscript.py\n\nwords = \"Hello Matt\"\n\nprint(words)\n\n\nHello Matt\n\n\nWhen we run our script we see that the output has not changed, as expected:\n\n\nTerminal/Command Prompt\n\npython script.py\n\n\n\nHello Matt"
  },
  {
    "objectID": "answers/answer_print_different_string.html",
    "href": "answers/answer_print_different_string.html",
    "title": "Beginning Python",
    "section": "",
    "text": "Here we change the line of code in our script to have the string \"Hello Matt\" instead of \"Hello from Python!\".\n\n\n\nscript.py\n\nprint(\"Hello Matt\")\n\n\nHello Matt\n\n\nWhen we run our changed script we see that it now prints our new string to the screen:\n\n\nTerminal/Command Prompt\n\npython script.py\n\n\n\nHello Matt\n\n\nReturn to course"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Python is a programming language which allows us to give instructions to the computer. These instructions can be as simple as “add together these two numbers” or as complex as “give me the average CO2 concentration for 2020”. For the former we will be able to complete the task using only a single instruction but for the latter, we may have to write a larger program containing hundreds or thousands of instructions.\nThis course is going to start from the beginning, showing you to talk to the computer to perform simple tasks and as you become more confident and follow the later courses, you will find that you are able to write much more complex programmes.\nPython is a well-established language, with the current version (version 3) released in 2008 and it is installed by default on nearly all modern Linux systems. Python is also available for MacOS and Windows.\nThis workshop is going to introduce you to the basics of the Python programming language with more advanced topics being covered by later workshops.\nYou can jump ahead to any chapter:\n\nGetting started\nData types\nLists\nLoops\nConditionals\nDictionaries\nSummary\n\n\nSetting up your workspace\nThere are lots of different ways to run Python code and many tools to help you write it. You don’t require any special tools to create a Python script, a simple text editor like Notepad on Windows is sufficient. More advanced tools include things like Jupyter Notebooks and IDEs like PyCharm or Visual Studio Code.\nFor this workshop we will be keeping things as simple as possible in order to allow us to focus on the topics we’re learning without having to learn too many extra tools along the way.\nFor the purpose of this course we will be using a free tool called JupyterLab which provides you with a local editor in your web browser where you can write and run Python code. The easiest way to get access to JupyterLab is to install Anaconda which is a piece of software which includes Python along with lots of other tools. It is freely available for Windows, MacOS and Linux.\nAnaconda can be installed into your home area on your computer so if you are on a work laptop, for example, you will not need any special permissions. Once Anaconda is installed, start “Anaconda Navigator” and press the JupyterLab button on the main screen:\n\n\n\nAnaconda Navigator\n\n\nThis will open JupyterLab in your default web browser and will look something like this:\n\n\n\nJupyterLab\n\n\nThe way that we will be setting up the space is to have a text editor on the left-hand side of the screen and a terminal on the right hand side. We’ll use the editor to write our code and the terminal to run it.\nIn the launcher tab, scoll down to the “Text File” entry and click that. It will turn the editor into a text editor. Then go to File → New and select “Terminal”. It will now have two tabs inside the interface, one labelled “untitled.txt” and the other labelled “Terminal 1”:\n\n\n\nJupyterLab\n\n\nThe contents of the Terminal tab will likely be a little different on your computer, compared to what is shown in thise images but that is ok.\nTo make our lives easier, let’s rearange things so that we can see the text editor at the same time as the terminal. Do this by pressing and holding down the left mouse button on the tab that says “Terminal 1” and slowly dragging it to the right-hand side of the window. You’ll see a blue outline like this:\n\n\n\nJupyterLab\n\n\nRelease the mouse button and you’ll end up with the two showing side-by-side:\n\n\n\nJupyterLab\n\n\nWe’re now ready to get started!",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "pages/02-data-types.html",
    "href": "pages/02-data-types.html",
    "title": "Data Types",
    "section": "",
    "text": "In the last chapter we introduced the idea of “strings”. They are a way of representing normal human words inside a Python script. Strings start and end with double quotes (\") e.g.,\n\n\"Hello from Python!\"\n\nis a string with three words and an exclamation mark as content.\nStrings can contain numbers as well:\n\n\"The Battle of Hastings was in 1066\"\n\nand they can even be empty:\n\n\"\"\n\nIt is possible in Python to also use single quotes (') to make strings, as long as the string starts and ends with the same type of quote, but it is convention to prefer double quotes.\n\n\n\n\n\n\nExercise 1\n\n\n\nEdit the file script.py to print out your name so that when it’s run it shows something like:\nHello Matt\nanswer\n\n\n\n\nThe other most common type of data that you’ll find in Python scripts are numbers. There are two main types of number in Python:\n\nFloats (or floating point numbers) are a way of representing numbers with decimal places\nIntegers are for representing whole numbers\n\nWhen creating numbers in Python, you do not use quotes, you write the number directly. So:\n\n3.14159\n\nis a float and\n\n42\n\nis an integer.\nIt’s important that when writing numbers in your scripts, you do not put quotation marks around them. There is a difference between 42 and \"42\". The first is the integer \\(42\\) (i.e. the number one greater that \\(41\\)) and the second is just a pair of digits and has no more meaning to Python than \"fourty two\" or \"penguin\" do.\n\n\n\nOf course, it not much use to have numbers and strings floating about with no connection to each other. We want to be able to give them names and combine them together. We assign names to data using the = sign. For example if we want to make some data and give it a name we can do it like:\n\npi = 3.14159\n\nThis has created a number 3.14159 and given it a name, pi. We can now use this name in other parts of the program to refer to that piece of data:\n\nprint(pi)\n\nNames in Python can contain upper and lower case letters, numbers and underscores (but can’t start with a number). Chosing the correct name for a particular variable is an important task as a non-descriptive name (or worse, an incorrect name) will be very confusing for you and anyone reading your code. It is common in Python to name your variables with all lower case letters and use underscores to separate words.\nSo, for a variable which contains a number representing a distance in miles, avoid shortened names like dm, distm or d and instead use a name like distance_in_miles. Remember, code will be written once but read many times so make it easy to read.\nThese two can be combined into a full Python script:\n\n\n\nvariables.py\n\npi = 3.14159\nprint(pi)\n\n\nand run with:\n\n\nTerminal/Command Prompt\n\npython variables.py\n\n\n\n3.14159\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nEdit your script.py to split it over two lines. The first line should create a string and give it a variable name and the second line should use that name to print. Make sure you save the file and rerun it in the terminal.\nanswer\n\n\n\n\n\nVariables are more that just a way of labelling data, they also make it easier to do things with your data. If you have some numbers you can add, subtract, multiply and divide them as you would expect. The symbol for multiplication is * and the symbol for division is /.\n\n\n\nscript.py\n\ndistance_in_miles = 30\ndistance_in_km = distance_in_miles * 1.60934\n\nprint(distance_in_km)\n\n\n48.2802\n\n\nHere we created a variable distance_in_miles with the value of 30. Then we used that variable in line two and multiplied it by a number (distance_in_miles * 1.60934) and assigned the result of that calculation to a new variable called distance_in_km. Finally, we printed out the new variable.\nLikewise we can do addition:\n\n\n\nscript.py\n\ntemperature_in_celcius = 25.1\ntemperature_in_kelvin = temperature_in_celcius + 273.15\n\nprint(temperature_in_kelvin)\n\n\n298.25\n\n\n\n\n\nSo far we’ve been giving the print function a single argument to print a single thing but we can print many things at once if we give it multiple arguments. Arguments to functions in Python are separated by commas. The print function is designed so that it will print each of the arguments it was provided with, one after another on the same line, separated by spaces.\n\n\n\nscript.py\n\nfav = \"red\"\n\nprint(\"My favourite colour is\", fav)\n\n\nMy favourite colour is red\n\n\nOverwriting colour.py\n\n\nTerminal/Command Prompt\n\nrun colour.py\n\n\n\n\n\n\n\nExercise 3\n\n\n\nEdit script.py so that the two parts of the phrase are passed to print as separate arguments. Make sure you save the file and rerun it in the terminal.\nIf you get strange output like ('Hello', 'Python') rather than Hello Python, then try running your script with the python3 command as described in this video.\nanswer\n\n\n\n\n\nSo far, all the code we’ve run is somewhat static. Every time we run the script, the output will always be the same. What if your favourite colour is not red? The power of programming is that it is dynamic and we can write code which responds and reacts. We’ll see a lot more of this throughout this workshop, but for now we’ll introduce one more function that Python provides, input.\nThe print function is how we get information out of our program, and the input function is how we get data into it.\nThe input function will pause the program and wait for you to type something in. Whatever you type, followed by enter will be assigned to whatever variable name you put on the left hand side of the =.\n\n\n\ncolour.py\n\nprint(\"What is your favourite colour?\")\n\nfav = input()\n\nprint(\"My favourite colour is\", fav)\n\n\nNow, if we run this script, it will print the first message, and then wait for you to type something. If you type “red” and then press enter, it will assign “red” to the variable fav and then use that variable in the final print function:\nWhat is your favourite colour? \nred\nMy favourite colour is red\nLikewise, you can run the script one more time and give a different answer and get a different output:\n%%run_python_script -i colour.py\nblue\nWhat is your favourite colour?\nblue\nMy favourite colour is blue\n\n\nOne small improvement we can make is that instead of printing our message “What is your favourite colour?”, prompting the user of the script to type something, we can do this directly with the input function by giving the prompt as an argument:\n\n\n\ncolour.py\n\nfav = input(\"What is your favourite colour? \")\n\nprint(\"My favourite colour is\", fav)\n\n\nNote that there is a space after the question mark so that when you’re typing in your answer it’s not butting directly against the character:\n\n\nTerminal/Command Prompt\n\npython colour.py\n\n\n\nMy favourite colour is red\n\n\nWhat is your favourite colour? red\nMy favourite colour is red\n\n\n\n\n\n\nExercise 4\n\n\n\nEdit script.py so the value of the variable name is set using the input function. Be sure to set a prompt as well so that the user know that they should type something.\nThe script should, when run with python script.py, then print out:\nWhat is your name?\nand wait for you to type your name like:\nWhat is your name? Matt\nAfter pressing enter, it should then print out:\nWhat is your name? Matt\nHello Matt\nanswer",
    "crumbs": [
      "Data Types"
    ]
  },
  {
    "objectID": "pages/02-data-types.html#strings",
    "href": "pages/02-data-types.html#strings",
    "title": "Data Types",
    "section": "",
    "text": "In the last chapter we introduced the idea of “strings”. They are a way of representing normal human words inside a Python script. Strings start and end with double quotes (\") e.g.,\n\n\"Hello from Python!\"\n\nis a string with three words and an exclamation mark as content.\nStrings can contain numbers as well:\n\n\"The Battle of Hastings was in 1066\"\n\nand they can even be empty:\n\n\"\"\n\nIt is possible in Python to also use single quotes (') to make strings, as long as the string starts and ends with the same type of quote, but it is convention to prefer double quotes.\n\n\n\n\n\n\nExercise 1\n\n\n\nEdit the file script.py to print out your name so that when it’s run it shows something like:\nHello Matt\nanswer\n\n\n\n\nThe other most common type of data that you’ll find in Python scripts are numbers. There are two main types of number in Python:\n\nFloats (or floating point numbers) are a way of representing numbers with decimal places\nIntegers are for representing whole numbers\n\nWhen creating numbers in Python, you do not use quotes, you write the number directly. So:\n\n3.14159\n\nis a float and\n\n42\n\nis an integer.\nIt’s important that when writing numbers in your scripts, you do not put quotation marks around them. There is a difference between 42 and \"42\". The first is the integer \\(42\\) (i.e. the number one greater that \\(41\\)) and the second is just a pair of digits and has no more meaning to Python than \"fourty two\" or \"penguin\" do.\n\n\n\nOf course, it not much use to have numbers and strings floating about with no connection to each other. We want to be able to give them names and combine them together. We assign names to data using the = sign. For example if we want to make some data and give it a name we can do it like:\n\npi = 3.14159\n\nThis has created a number 3.14159 and given it a name, pi. We can now use this name in other parts of the program to refer to that piece of data:\n\nprint(pi)\n\nNames in Python can contain upper and lower case letters, numbers and underscores (but can’t start with a number). Chosing the correct name for a particular variable is an important task as a non-descriptive name (or worse, an incorrect name) will be very confusing for you and anyone reading your code. It is common in Python to name your variables with all lower case letters and use underscores to separate words.\nSo, for a variable which contains a number representing a distance in miles, avoid shortened names like dm, distm or d and instead use a name like distance_in_miles. Remember, code will be written once but read many times so make it easy to read.\nThese two can be combined into a full Python script:\n\n\n\nvariables.py\n\npi = 3.14159\nprint(pi)\n\n\nand run with:\n\n\nTerminal/Command Prompt\n\npython variables.py\n\n\n\n3.14159\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nEdit your script.py to split it over two lines. The first line should create a string and give it a variable name and the second line should use that name to print. Make sure you save the file and rerun it in the terminal.\nanswer\n\n\n\n\n\nVariables are more that just a way of labelling data, they also make it easier to do things with your data. If you have some numbers you can add, subtract, multiply and divide them as you would expect. The symbol for multiplication is * and the symbol for division is /.\n\n\n\nscript.py\n\ndistance_in_miles = 30\ndistance_in_km = distance_in_miles * 1.60934\n\nprint(distance_in_km)\n\n\n48.2802\n\n\nHere we created a variable distance_in_miles with the value of 30. Then we used that variable in line two and multiplied it by a number (distance_in_miles * 1.60934) and assigned the result of that calculation to a new variable called distance_in_km. Finally, we printed out the new variable.\nLikewise we can do addition:\n\n\n\nscript.py\n\ntemperature_in_celcius = 25.1\ntemperature_in_kelvin = temperature_in_celcius + 273.15\n\nprint(temperature_in_kelvin)\n\n\n298.25\n\n\n\n\n\nSo far we’ve been giving the print function a single argument to print a single thing but we can print many things at once if we give it multiple arguments. Arguments to functions in Python are separated by commas. The print function is designed so that it will print each of the arguments it was provided with, one after another on the same line, separated by spaces.\n\n\n\nscript.py\n\nfav = \"red\"\n\nprint(\"My favourite colour is\", fav)\n\n\nMy favourite colour is red\n\n\nOverwriting colour.py\n\n\nTerminal/Command Prompt\n\nrun colour.py\n\n\n\n\n\n\n\nExercise 3\n\n\n\nEdit script.py so that the two parts of the phrase are passed to print as separate arguments. Make sure you save the file and rerun it in the terminal.\nIf you get strange output like ('Hello', 'Python') rather than Hello Python, then try running your script with the python3 command as described in this video.\nanswer\n\n\n\n\n\nSo far, all the code we’ve run is somewhat static. Every time we run the script, the output will always be the same. What if your favourite colour is not red? The power of programming is that it is dynamic and we can write code which responds and reacts. We’ll see a lot more of this throughout this workshop, but for now we’ll introduce one more function that Python provides, input.\nThe print function is how we get information out of our program, and the input function is how we get data into it.\nThe input function will pause the program and wait for you to type something in. Whatever you type, followed by enter will be assigned to whatever variable name you put on the left hand side of the =.\n\n\n\ncolour.py\n\nprint(\"What is your favourite colour?\")\n\nfav = input()\n\nprint(\"My favourite colour is\", fav)\n\n\nNow, if we run this script, it will print the first message, and then wait for you to type something. If you type “red” and then press enter, it will assign “red” to the variable fav and then use that variable in the final print function:\nWhat is your favourite colour? \nred\nMy favourite colour is red\nLikewise, you can run the script one more time and give a different answer and get a different output:\n%%run_python_script -i colour.py\nblue\nWhat is your favourite colour?\nblue\nMy favourite colour is blue\n\n\nOne small improvement we can make is that instead of printing our message “What is your favourite colour?”, prompting the user of the script to type something, we can do this directly with the input function by giving the prompt as an argument:\n\n\n\ncolour.py\n\nfav = input(\"What is your favourite colour? \")\n\nprint(\"My favourite colour is\", fav)\n\n\nNote that there is a space after the question mark so that when you’re typing in your answer it’s not butting directly against the character:\n\n\nTerminal/Command Prompt\n\npython colour.py\n\n\n\nMy favourite colour is red\n\n\nWhat is your favourite colour? red\nMy favourite colour is red\n\n\n\n\n\n\nExercise 4\n\n\n\nEdit script.py so the value of the variable name is set using the input function. Be sure to set a prompt as well so that the user know that they should type something.\nThe script should, when run with python script.py, then print out:\nWhat is your name?\nand wait for you to type your name like:\nWhat is your name? Matt\nAfter pressing enter, it should then print out:\nWhat is your name? Matt\nHello Matt\nanswer",
    "crumbs": [
      "Data Types"
    ]
  }
]